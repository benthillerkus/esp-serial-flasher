name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GCC_NAME: arm-linux-gnueabihf-gcc
  G++_NAME: arm-linux-gnueabihf-g++

jobs:
  cross:
    name: Download cross compiler
    runs-on: ubuntu-latest
    steps:
      - name: Download
        run: wget -O archive https://downloads.sourceforge.net/project/raspberry-pi-cross-compilers/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Buster/GCC%2010.2.0/Raspberry%20Pi%203A%2B%2C%203B%2B%2C%204/cross-gcc-10.2.0-pi_3%2B.tar.gz?ts=1618078858&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fraspberry-pi-cross-compilers%2Ffiles%2FRaspberry%2520Pi%2520GCC%2520Cross-Compiler%2520Toolchains%2FBuster%2FGCC%252010.2.0%2FRaspberry%2520Pi%25203A%252B%252C%25203B%252B%252C%25204%2Fcross-gcc-10.2.0-pi_3%252B.tar.gz%2Fdownload%3Fuse_mirror%3Dautoselect
      
      - name: Extract
        run: tar --extract -f archive cross-pi-gcc-10.2.0-2/bin/
      
      - uses: actions/upload-artifact@v2
        with:
          name: cross-compiler
          path: |
            cross-pi-gcc-10.2.0-2/bin/$GCC_NAME
            cross-pi-gcc-10.2.0-2/bin/$G++_NAME
          retention-days: 5

  build:
    name: Build Raspberry Flasher Example
    needs: cross
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - uses: actions/checkout@v2
      with:
        # Repository name with owner. For example, actions/checkout
        # Default: ${{ github.repository }}
        repository: 'joan2937/pigpio'
        path: pigpio-master
    
    - name: Build Pigpio
      working-directory: ${{github.workspace}}/pigpio-master
      run: make
      
    - name: Install Pigpio
      working-directory: ${{github.workspace}}/pigpio-master
      run: sudo make install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - uses: actions/download-artifact@v2
      with:
        name: cross-compiler
        path: ${{github.workspace}}/build
    
    - name: Make cross compiler executable
      working-directory: ${{github.workspace}}/build
      run: chmod +x ./$GCC_NAME ./G++_NAME

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
       cmake $GITHUB_WORKSPACE/examples/raspberry_example -DCMAKE_BUILD_TYPE=$BUILD_TYPE -D CMAKE_C_COMPILER=$GCC_NAME -D CMAKE_CXX_COMPILER=$G++_NAME -D CMAKE_SYSTEM_NAME=Linux -D CMAKE_SYSTEM_PROCESSOR=arm

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      
    - name: List Build Directory
      working-directory: ${{github.workspace}}/build
      run: ls -R
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: raspberry_flasher
        path: ${{github.workspace}}/build/raspberry_flasher
